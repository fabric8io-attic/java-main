#!/bin/bash

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /tmp/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ -d /tmp/artifacts/ ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /tmp/artifacts/.m2 $HOME/.
  else 
    echo -n "Can't find saved artifacts. Ignoring..."
  fi
}

# Source code provided to STI is at ${HOME}/source
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

# The dir that contains the build output
if [ -z "$OUTPUT_DIR" ]; then
  export OUTPUT_DIR="$LOCAL_SOURCE_DIR/target"
elif [[ $OUTPUT_DIR != /* ]]; then
  export OUTPUT_DIR="$LOCAL_SOURCE_DIR/$OUTPUT_DIR"
fi

# Output will result in /opt/jboss/deploy folder
DEPLOY_DIR=/opt/jboss/deploy
mkdir -p $DEPLOY_DIR

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  pushd $LOCAL_SOURCE_DIR &> /dev/null
  JAVA_HOME=/etc/alternatives/java_sdk_1.7.0

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package dependency:copy-dependencies -Popenshift -DskipTests -e"
  fi
  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS -X > .mvn.out
  cat .mvn.out | grep "properties used" > .mvn.props
  sed 's/.*docker.env.MAIN=\([^, ]*\),.*/\1/' .mvn.props | head -n 1 > $OUTPUT_DIR/JAVA_MAIN_CLASS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn package"
    exit $ERR
  fi


  echo "Copying built artifacts from $OUTPUT_DIR into $DEPLOY_DIR for later deployment..."
  popd &> /dev/null
else
  if [ -z "$OUTPUT_DIR" ]; then
    export OUTPUT_DIR="$LOCAL_SOURCE_DIR"
  fi
  echo "Copying binaries in source directory into $DEPLOY_DIR for later deployment..."
fi

if [ -z "$DEPLOY_FILE_MASK" ]; then
  DEPLOY_FILE_MASK='*'
fi

if [ -d $OUTPUT_DIR ]; then
  cp -r $OUTPUT_DIR/$DEPLOY_FILE_MASK $DEPLOY_DIR >& /dev/null
fi

echo "...done"
